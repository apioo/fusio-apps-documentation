/*
 evid
 Copyright (C) 2015-2016 Christoph Kappestein
 License: MIT
*/
"use strict";var evid=angular.module("evid",["ngRoute","ngSanitize","ngMaterial","ngAnimate","hljs","evid.definition","evid.registry","evid.schema","evid.api","evid.page"]);evid.provider("evid",function(){var url=null,exclude=null,menu=null,examples=!1;this.setUrl=function(_url){url=_url},this.setExclude=function(_exclude){exclude=_exclude},this.setMenu=function(_menu){menu=_menu},this.setExamples=function(_examples){examples=_examples},this.guessEndpointUrl=function(urlRewrite){for(var url=window.location.href,removePart=function(url,sign){var count=(url.match(/\//g)||[]).length,pos=url.lastIndexOf(sign);return count>2&&-1!==pos?url.substring(0,pos):url},parts=["#","?","/","/"],i=0;i<parts.length;i++)url=removePart(url,parts[i]);return url+(urlRewrite?"/":"/index.php/")},this.$get=function(){return null===url&&"undefined"!=typeof fusio_url?url=fusio_url:null===url&&(url=this.guessFusioEndpointUrl(!1)),{url:url,exclude:exclude,menu:menu,examples:examples}}}),evid.config(["$routeProvider",function($routeProvider){$routeProvider.when("/api/:api*?",{templateUrl:"app/partials/api.html",controller:"ApiCtrl"}).when("/page/:page?",{templateUrl:"app/partials/page.html",controller:"PageCtrl"}).otherwise({redirectTo:"/api/"})}]),evid.config(function($mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("blue").accentPalette("grey")}),evid.filter("slugify",function(){return function(input){return input?input.toLowerCase().replace(/\W+/g,"-"):""}}),evid.filter("ucfirst",function(){return function(input){return input?input.charAt(0).toUpperCase()+input.substring(1):""}}),evid.controller("AppCtrl",["$scope","$http","$mdSidenav","evid","definition",function($scope,$http,$mdSidenav,evid,definition){$scope.menus=evid.menu,$scope.routings=[],$scope.toggleSidebar=function(){$mdSidenav("left").toggle()},$scope.loadRoutings=function(){definition.initialize().then(function(def){$scope.routings=def.getRoutings()})},$scope.loadRoutings()}]),evid.run(function(){}),angular.module("evid.api",[]).controller("ApiCtrl",["$scope","$http","$compile","$sce","$mdSidenav","$mdDialog","$routeParams","definition","schema","evid",function($scope,$http,$compile,$sce,$mdSidenav,$mdDialog,$routeParams,definition,schema,evid){function ConsoleCtrl($scope,$http,endpoint,method,body){$scope.request={method:method,url:endpoint,accessToken:"",body:body},$scope.response={statusCode:null,statusText:null,body:null},$scope.methods=["GET","POST","PUT","DELETE"],$scope.loading=!1,$scope.sendRequest=function(){$scope.loading=!0;var callback=function(resp){$scope.loading=!1,$scope.response.statusCode=resp.status,$scope.response.statusText=resp.statusText,$scope.response.body=JSON.stringify(resp.data,null,4)},headers=null,withCredentials=!1;$scope.request.accessToken&&(headers={Authorization:"Bearer "+$scope.request.accessToken},withCredentials=!0);var body=null;("POST"==$scope.request.method||"PUT"==$scope.request.method)&&(body=$scope.request.body);var conf={method:$scope.request.method,url:$scope.request.url,data:body,headers:headers,cache:!1,withCredentials:withCredentials};$http(conf).then(callback,callback)},$scope.close=function(){$mdDialog.cancel()}}$scope.api={},$scope.methods={},$scope.endpoint="",$scope.selectedMethod="",$scope.loadApi=function(){definition.initialize().then(function(def){var url=def.getLinkByRel("detail");if(url){var path=$routeParams.api?$routeParams.api:null;if(!path)if(def.hasEmptyRoute())path="/";else{var route=def.getFirstRoute();route&&(path=route.path)}url=url.replace("{version}","*"),url=url.replace("{path}",path),$http.get(url).then(function(resp){if($scope.api=resp.data,$scope.api.methods){var methods={};for(var methodName in $scope.api.methods)if($scope.api.methods.hasOwnProperty(methodName)){var schema=$scope.getSchema(methodName,$scope.api.methods[methodName]);schema||(schema='<div class="md-padding md-default-theme">This API method provides no schema informations.</div>'),methods[methodName]=schema}$scope.methods=methods;var endpoint=def.getLinkByRel("api");if(endpoint&&$scope.api.path&&($scope.endpoint=endpoint+$scope.api.path.substring(1)),$mdSidenav("left").close(),evid.examples){var exampleUrl="examples/"+path.replace("/","_").replace(":","")+".yaml";$http.get(exampleUrl).then(function(resp){$scope.examples=jsyaml.load(resp.data)})}}})}})},$scope.getSchema=function(methodName,method){var apiSchema=schema.create($scope.api),html=apiSchema.getHtml(methodName,method),linkFn=$compile(html),el=linkFn($scope);return $sce.trustAsHtml(el.html())},$scope.showConsole=function(ev){$mdDialog.show({controller:ConsoleCtrl,templateUrl:"app/partials/console.html",clickOutsideToClose:!0,targetEvent:ev,locals:{endpoint:$scope.endpoint,method:$scope.getSelectedMethod(),body:$scope.getBodySample()}})},$scope.getSelectedMethod=function(){var i=0;for(var methodName in $scope.methods)if($scope.methods.hasOwnProperty(methodName)){if(i==$scope.selectedMethod)return methodName;i++}return null},$scope.getBodySample=function(){var methodName=$scope.getSelectedMethod();if("GET"==methodName||"DELETE"==methodName)return"";if($scope.api.methods[methodName]){var apiSchema=schema.create($scope.api),data=apiSchema.getJsonSampleRequest($scope.api.methods[methodName]);return JSON.stringify(data,null,4)}return""},$scope.loadApi()}]),angular.module("evid.page",[]).controller("PageCtrl",["$scope","$http","$compile","$sce","$routeParams","$filter","evid",function($scope,$http,$compile,$sce,$routeParams,$filter,evid){$scope.title="",$scope.href="",$scope.loadDocument=function(){var slugify=$filter("slugify"),item=!1,title=!1;$routeParams.page&&(title=$routeParams.page);for(var i=0;i<evid.menu.length;i++)if(slugify(evid.menu[i].title)==title||title===!1){item=evid.menu[i];break}item?($scope.title=item.title,$scope.href=item.href):($scope.title="Page not found",$scope.href=null)},$scope.loadDocument()}]),angular.module("evid.definition",[]).service("definition",["$http","$q","evid","registry",function($http,$q,evid,registry){function Def(api,exclude){this.api=api,this.exclude=exclude,this.getRoutings=function(){var routings=[];if(angular.isArray(this.api.routings))if(angular.isArray(this.exclude))for(var i=0;i<this.api.routings.length;i++){for(var exclude=!1,j=0;j<this.exclude.length;j++)if(this.api.routings[i].path.match(this.exclude[j])){exclude=!0;break}exclude||routings.push(this.api.routings[i])}else routings=this.api.routings;return routings},this.getFirstRoute=function(){var routings=this.getRoutings();return routings.length>0?routings[0]:null},this.hasEmptyRoute=function(){for(var routings=this.getRoutings(),i=0;i<routings.length;i++)if("/"==routings[i].path)return!0;return!1},this.getLinkByRel=function(rel){if(this.api&&this.api.links&&angular.isArray(this.api.links))for(var i=0;i<this.api.links.length;i++)if(this.api.links[i].rel==rel)return this.api.links[i].href;return null}}this.initialize=function(){return $q(registry.has("definition")?function(resolve){resolve(registry.get("definition"))}:function(resolve,reject){$http.get(evid.url).then(function(response){registry.set("definition",new Def(response.data,evid.exclude)),resolve(registry.get("definition"))},function(){reject()})})}}]),angular.module("evid.registry",[]).service("registry",function(){this.container={},this.set=function(name,service){this.container[name]=service},this.get=function(name){return this.has(name)?this.container[name]:null},this.has=function(name){return this.container.hasOwnProperty(name)}}),angular.module("evid.schema",[]).service("schema",function(){function SchemaGenerator(definition){this.definition=definition,this.schema=definition.schema,this.getHtml=function(methodName,method){var html="<div>",request=this.getRequest(method);request&&(html+='<md-subheader class="md-primary">'+methodName+" Request</md-subheader>",html+='<div class="evid-schema-table">'+request+"</div>");for(var statusCodes=this.getAvailableResponseCodes(method),i=0;i<statusCodes.length;i++){var response=this.getResponse(method,statusCodes[i]);response&&(html+='<md-subheader class="md-primary">'+methodName+" Response - "+statusCodes[i]+"</md-subheader>",html+='<div class="evid-schema-table">'+response+"</div>")}return html+="</div>"},this.getJsonSampleRequest=function(method){return this.getRequest(method,"json")},this.getRequest=function(method,format){if(method&&method.request){var data=this.getPointer(method.request);if(data)return this.transformSchema(data,format)}return null},this.getResponse=function(method,statusCode,format){if(method&&method.responses&&method.responses[statusCode]){var data=this.getPointer(method.responses[statusCode]);if(data)return this.transformSchema(data,format)}return null},this.getAvailableResponseCodes=function(method){var codes=[];if(method&&method.responses)for(var statusCode in method.responses)method.responses.hasOwnProperty(statusCode)&&codes.push(statusCode);return codes},this.getPointer=function(path){if(!path)return null;"#/"==path.substring(0,2)&&(path=path.substring(2));for(var parts=path.split("/"),el=this.schema,i=0;i<parts.length&&el[parts[i]];i++)el=el[parts[i]];return el},this.resolveRef=function(schema){return schema.$ref&&(schema=this.resolveRef(this.getPointer(schema.$ref))),schema},this.transformSchema=function(schema,format){return"json"==format?this.buildJsonObject(this.resolveRef(schema)):this.buildHtmlObject(this.resolveRef(schema))},this.buildHtmlObject=function(schema){var html="";if(schema.properties){var references=[],title="Object";schema.title&&(title=schema.title),html+='<md-subheader class="md-hue-1"><strong>'+title+"</strong></md-subheader>",schema.description&&(html+="<p>"+schema.description+"</p>"),html+="<table>",html+="<colgroup>",html+='    <col width="20%">',html+='    <col width="20%">',html+='    <col width="40%">',html+='    <col width="20%">',html+="</colgroup>",html+="<thead>",html+="<tr>",html+="    <th>Property</th>",html+="    <th>Type</th>",html+="    <th>Description</th>",html+="    <th>Constraints</th>",html+="</tr>",html+="</thead>",html+="<tbody>";for(var propertyName in schema.properties)if(schema.properties.hasOwnProperty(propertyName)){var object,property=schema.properties[propertyName];property.$ref&&(property=this.resolveRef(property));var type=property.type?property.type:"string";"object"===type?(object=this.resolveRef(property),object.title&&(type=object.title),references.push(object)):"array"===type&&property.items&&(object=this.resolveRef(property.items),"object"===object.type?(type=object.title?"array&lt;"+object.title+"&gt;":"array&lt;object&gt;",references.push(object)):object.type&&(type="array&lt;"+object.type+"&gt;"));var required=!1;if(angular.isArray(schema.required))for(var j=0;j<schema.required.length;j++)if(schema.required[j]===propertyName){required=!0;break}html+="<tr>",html+=required?'<td><span class="evid-property-required" title="required">'+propertyName+"</span></td>":'<td><span class="evid-property">'+propertyName+"</span></td>",html+="<td>"+type+"</td>",html+="<td>"+(property.description?property.description:"")+"</td>",html+="<td>"+this.buildConstraints(property)+"</td>",html+="</tr>"}html+="</tbody>",html+="</table>";for(var i=0;i<references.length;i++)html+=this.buildHtmlObject(references[i])}return html},this.buildConstraints=function(property){var html="<dl>";return property.pattern&&(html+="<dt>Pattern:</dt><dd>"+property.pattern+"</dd>"),property["enum"]&&angular.isArray(property["enum"])&&(html+="<dt>Enumeration:</dt><dd>"+property["enum"].join(", ")+"</dd>"),property.minLength&&(html+="<dt>Min-Length:</dt><dd>"+property.minLength+"</dd>"),property.maxLength&&(html+="<dt>Max-Length:</dt><dd>"+property.maxLength+"</dd>"),property.minimum&&(html+="<dt>Minimum:</dt><dd>"+property.minimum+"</dd>"),property.maximum&&(html+="<dt>Maximum:</dt><dd>"+property.maximum+"</dd>"),html+="</dl>"},this.buildJsonObject=function(schema){var data={};if(schema.properties)for(var propertyName in schema.properties)if(schema.properties.hasOwnProperty(propertyName)){var object,property=schema.properties[propertyName];property.$ref&&(property=this.resolveRef(property));var type=property.type?property.type:"string";if("object"===type)object=this.resolveRef(property),data[propertyName]=this.buildJsonObject(object);else if("array"===type){var result=[];property.items&&(object=this.resolveRef(property.items),result.push("object"===object.type?this.buildJsonObject(object):"")),data[propertyName]=result}else data[propertyName]="integer"===type?0:"number"===type?0:"null"===type?null:"boolean"===type?!1:""}return data}}this.create=function(definition){return new SchemaGenerator(definition)}});